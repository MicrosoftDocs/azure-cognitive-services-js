### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient'
    name: ComputerVisionClient
    fullName: ComputerVisionClient
    children:
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImage_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImage
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImage_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomain_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomain
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomain_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomainInStream_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomainInStream
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomainInStream_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageInStream_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageInStream
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageInStream_1
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.constructor'
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.credentials'
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.describeImage_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.describeImage
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.describeImage_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.describeImageInStream_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.describeImageInStream
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.describeImageInStream_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjects
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjects_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjects_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjectsInStream
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjectsInStream_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjectsInStream_1
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.endpoint'
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnail_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnail
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnail_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnailInStream_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnailInStream
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnailInStream_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterest
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterest_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterest_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterestInStream
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterestInStream_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterestInStream_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.getReadResult
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.getReadResult_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.getReadResult_1
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.listModels'
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.listModels_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.listModels_1
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.read_2'
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.read'
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.read_1'
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.readInStream_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.readInStream
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.readInStream_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedText_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedText
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedText_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedTextInStream_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedTextInStream
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedTextInStream_1
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.sendOperationRequest
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.sendRequest'
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.tagImage_2'
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.tagImage'
      - '@azure/cognitiveservices-computervision.ComputerVisionClient.tagImage_1'
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.tagImageInStream_2
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.tagImageInStream
      - >-
        @azure/cognitiveservices-computervision.ComputerVisionClient.tagImageInStream_1
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/cognitiveservices-computervision.ComputerVisionClientContext'
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImage_2
    name: >-
      analyzeImage(string, ComputerVisionClientAnalyzeImageOptionalParams,
      ServiceCallback<ImageAnalysis>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function analyzeImage(url: string, options:
        ComputerVisionClientAnalyzeImageOptionalParams, callback:
        ServiceCallback<ImageAnalysis>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ImageAnalysis>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImage'
    name: >-
      analyzeImage(string,
      Models.ComputerVisionClientAnalyzeImageOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation extracts a rich set of visual features based on the image
      content.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL. Within

      your request, there is an optional parameter to allow you to choose which
      features to return. By

      default, image categories are returned in the response.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    syntax:
      content: >-
        function analyzeImage(url: string, options?:
        Models.ComputerVisionClientAnalyzeImageOptionalParams)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - Models.ComputerVisionClientAnalyzeImageOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.AnalyzeImageResponse>
        description: Promise<Models.AnalyzeImageResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImage_1
    name: 'analyzeImage(string, ServiceCallback<ImageAnalysis>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function analyzeImage(url: string, callback:
        ServiceCallback<ImageAnalysis>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ImageAnalysis>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomain_2
    name: >-
      analyzeImageByDomain(string, string,
      ComputerVisionClientAnalyzeImageByDomainOptionalParams,
      ServiceCallback<DomainModelResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function analyzeImageByDomain(model: string, url: string, options:
        ComputerVisionClientAnalyzeImageByDomainOptionalParams, callback:
        ServiceCallback<DomainModelResults>)
      parameters:
        - id: model
          type:
            - string
          description: The domain-specific content to recognize.
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageByDomainOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.DomainModelResults>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomain
    name: >-
      analyzeImageByDomain(string, string,
      Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation recognizes content within an image by applying a
      domain-specific model. The list

      of domain-specific models that are supported by the Computer Vision API
      can be retrieved using

      the /models GET request. Currently, the API provides following
      domain-specific models:

      celebrities, landmarks.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON.

      If the request failed, the response will contain an error code and a
      message to help understand

      what went wrong.
    syntax:
      content: >-
        function analyzeImageByDomain(model: string, url: string, options?:
        Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams)
      parameters:
        - id: model
          type:
            - string
          description: The domain-specific content to recognize.
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - Models.ComputerVisionClientAnalyzeImageByDomainOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.AnalyzeImageByDomainResponse>
        description: Promise<Models.AnalyzeImageByDomainResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomain_1
    name: 'analyzeImageByDomain(string, string, ServiceCallback<DomainModelResults>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function analyzeImageByDomain(model: string, url: string, callback:
        ServiceCallback<DomainModelResults>)
      parameters:
        - id: model
          type:
            - string
          description: The domain-specific content to recognize.
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.DomainModelResults>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomainInStream_2
    name: >-
      analyzeImageByDomainInStream(string, msRest.HttpRequestBody,
      ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams,
      ServiceCallback<DomainModelResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function analyzeImageByDomainInStream(model: string, image:
        msRest.HttpRequestBody, options:
        ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams,
        callback: ServiceCallback<DomainModelResults>)
      parameters:
        - id: model
          type:
            - string
          description: The domain-specific content to recognize.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.DomainModelResults>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomainInStream
    name: >-
      analyzeImageByDomainInStream(string, msRest.HttpRequestBody,
      Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation recognizes content within an image by applying a
      domain-specific model. The list

      of domain-specific models that are supported by the Computer Vision API
      can be retrieved using

      the /models GET request. Currently, the API provides following
      domain-specific models:

      celebrities, landmarks.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON.

      If the request failed, the response will contain an error code and a
      message to help understand

      what went wrong.
    syntax:
      content: >-
        function analyzeImageByDomainInStream(model: string, image:
        msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams)
      parameters:
        - id: model
          type:
            - string
          description: The domain-specific content to recognize.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - >-
              Models.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.AnalyzeImageByDomainInStreamResponse>
        description: Promise<Models.AnalyzeImageByDomainInStreamResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageByDomainInStream_1
    name: >-
      analyzeImageByDomainInStream(string, msRest.HttpRequestBody,
      ServiceCallback<DomainModelResults>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function analyzeImageByDomainInStream(model: string, image:
        msRest.HttpRequestBody, callback: ServiceCallback<DomainModelResults>)
      parameters:
        - id: model
          type:
            - string
          description: The domain-specific content to recognize.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.DomainModelResults>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageInStream_2
    name: >-
      analyzeImageInStream(msRest.HttpRequestBody,
      ComputerVisionClientAnalyzeImageInStreamOptionalParams,
      ServiceCallback<ImageAnalysis>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function analyzeImageInStream(image: msRest.HttpRequestBody, options:
        ComputerVisionClientAnalyzeImageInStreamOptionalParams, callback:
        ServiceCallback<ImageAnalysis>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageInStreamOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ImageAnalysis>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageInStream
    name: >-
      analyzeImageInStream(msRest.HttpRequestBody,
      Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation extracts a rich set of visual features based on the image
      content.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL. Within

      your request, there is an optional parameter to allow you to choose which
      features to return. By

      default, image categories are returned in the response.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    syntax:
      content: >-
        function analyzeImageInStream(image: msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - Models.ComputerVisionClientAnalyzeImageInStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.AnalyzeImageInStreamResponse>
        description: Promise<Models.AnalyzeImageInStreamResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.analyzeImageInStream_1
    name: >-
      analyzeImageInStream(msRest.HttpRequestBody,
      ServiceCallback<ImageAnalysis>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function analyzeImageInStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<ImageAnalysis>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ImageAnalysis>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.constructor'
    name: >-
      ComputerVisionClient(ServiceClientCredentials, string,
      msRest.ServiceClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Initializes a new instance of the ComputerVisionClient class.
    syntax:
      content: >-
        new ComputerVisionClient(credentials: ServiceClientCredentials,
        endpoint: string, options?: msRest.ServiceClientOptions)
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: >-
            Subscription credentials which uniquely identify client
            subscription.
        - id: endpoint
          type:
            - string
          description: Supported Cognitive Services endpoints.
        - id: options
          type:
            - msRest.ServiceClientOptions
          description: ''
          optional: true
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
        description: ''
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.describeImage_2
    name: >-
      describeImage(string, ComputerVisionClientDescribeImageOptionalParams,
      ServiceCallback<ImageDescription>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function describeImage(url: string, options:
        ComputerVisionClientDescribeImageOptionalParams, callback:
        ServiceCallback<ImageDescription>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientDescribeImageOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ImageDescription>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.describeImage'
    name: >-
      describeImage(string,
      Models.ComputerVisionClientDescribeImageOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation generates a description of an image in human readable
      language with complete

      sentences. The description is based on a collection of content tags, which
      are also returned by

      the operation. More than one description can be generated for each image.
      Descriptions are

      ordered by their confidence score. Descriptions may include results from
      celebrity and landmark

      domain models, if applicable.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    syntax:
      content: >-
        function describeImage(url: string, options?:
        Models.ComputerVisionClientDescribeImageOptionalParams)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - Models.ComputerVisionClientDescribeImageOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DescribeImageResponse>
        description: Promise<Models.DescribeImageResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.describeImage_1
    name: 'describeImage(string, ServiceCallback<ImageDescription>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function describeImage(url: string, callback:
        ServiceCallback<ImageDescription>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ImageDescription>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.describeImageInStream_2
    name: >-
      describeImageInStream(msRest.HttpRequestBody,
      ComputerVisionClientDescribeImageInStreamOptionalParams,
      ServiceCallback<ImageDescription>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function describeImageInStream(image: msRest.HttpRequestBody, options:
        ComputerVisionClientDescribeImageInStreamOptionalParams, callback:
        ServiceCallback<ImageDescription>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientDescribeImageInStreamOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ImageDescription>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.describeImageInStream
    name: >-
      describeImageInStream(msRest.HttpRequestBody,
      Models.ComputerVisionClientDescribeImageInStreamOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation generates a description of an image in human readable
      language with complete

      sentences. The description is based on a collection of content tags, which
      are also returned by

      the operation. More than one description can be generated for each image.
      Descriptions are

      ordered by their confidence score. Descriptions may include results from
      celebrity and landmark

      domain models, if applicable.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    syntax:
      content: >-
        function describeImageInStream(image: msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientDescribeImageInStreamOptionalParams)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - Models.ComputerVisionClientDescribeImageInStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DescribeImageInStreamResponse>
        description: Promise<Models.DescribeImageInStreamResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.describeImageInStream_1
    name: >-
      describeImageInStream(msRest.HttpRequestBody,
      ServiceCallback<ImageDescription>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function describeImageInStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<ImageDescription>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ImageDescription>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.detectObjects'
    name: 'detectObjects(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Performs object detection on the specified image.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    syntax:
      content: 'function detectObjects(url: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DetectObjectsResponse>
        description: Promise<Models.DetectObjectsResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjects_2
    name: 'detectObjects(string, RequestOptionsBase, ServiceCallback<DetectResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function detectObjects(url: string, options: RequestOptionsBase,
        callback: ServiceCallback<DetectResult>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.DetectResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjects_1
    name: 'detectObjects(string, ServiceCallback<DetectResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function detectObjects(url: string, callback:
        ServiceCallback<DetectResult>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.DetectResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjectsInStream
    name: 'detectObjectsInStream(msRest.HttpRequestBody, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Performs object detection on the specified image.

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    syntax:
      content: >-
        function detectObjectsInStream(image: msRest.HttpRequestBody, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DetectObjectsInStreamResponse>
        description: Promise<Models.DetectObjectsInStreamResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjectsInStream_2
    name: >-
      detectObjectsInStream(msRest.HttpRequestBody, RequestOptionsBase,
      ServiceCallback<DetectResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function detectObjectsInStream(image: msRest.HttpRequestBody, options:
        RequestOptionsBase, callback: ServiceCallback<DetectResult>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.DetectResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.detectObjectsInStream_1
    name: >-
      detectObjectsInStream(msRest.HttpRequestBody,
      ServiceCallback<DetectResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function detectObjectsInStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<DetectResult>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.DetectResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.endpoint'
    name: endpoint
    fullName: endpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'endpoint: string'
      return:
        type:
          - string
        description: ''
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnail_2
    name: >-
      generateThumbnail(number, number, string,
      ComputerVisionClientGenerateThumbnailOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateThumbnail(width: number, height: number, url: string,
        options: ComputerVisionClientGenerateThumbnailOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: width
          type:
            - number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type:
            - number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientGenerateThumbnailOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnail
    name: >-
      generateThumbnail(number, number, string,
      Models.ComputerVisionClientGenerateThumbnailOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation generates a thumbnail image with the user-specified width
      and height. By default,

      the service analyzes the image, identifies the region of interest (ROI),
      and generates smart

      cropping coordinates based on the ROI. Smart cropping helps when you
      specify an aspect ratio

      that differs from that of the input image.

      A successful response contains the thumbnail image binary. If the request
      failed, the response

      contains an error code and a message to help determine what went wrong.

      Upon failure, the error code and an error message are returned. The error
      code could be one of

      InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
      InvalidThumbnailSize, NotSupportedImage,

      FailedToProcess, Timeout, or InternalServerError.
    syntax:
      content: >-
        function generateThumbnail(width: number, height: number, url: string,
        options?: Models.ComputerVisionClientGenerateThumbnailOptionalParams)
      parameters:
        - id: width
          type:
            - number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type:
            - number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - Models.ComputerVisionClientGenerateThumbnailOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GenerateThumbnailResponse>
        description: Promise<Models.GenerateThumbnailResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnail_1
    name: 'generateThumbnail(number, number, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateThumbnail(width: number, height: number, url: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: width
          type:
            - number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type:
            - number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnailInStream_2
    name: >-
      generateThumbnailInStream(number, number, msRest.HttpRequestBody,
      ComputerVisionClientGenerateThumbnailInStreamOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateThumbnailInStream(width: number, height: number, image:
        msRest.HttpRequestBody, options:
        ComputerVisionClientGenerateThumbnailInStreamOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: width
          type:
            - number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type:
            - number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientGenerateThumbnailInStreamOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnailInStream
    name: >-
      generateThumbnailInStream(number, number, msRest.HttpRequestBody,
      Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation generates a thumbnail image with the user-specified width
      and height. By default,

      the service analyzes the image, identifies the region of interest (ROI),
      and generates smart

      cropping coordinates based on the ROI. Smart cropping helps when you
      specify an aspect ratio

      that differs from that of the input image.

      A successful response contains the thumbnail image binary. If the request
      failed, the response

      contains an error code and a message to help determine what went wrong.

      Upon failure, the error code and an error message are returned. The error
      code could be one of

      InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
      InvalidThumbnailSize, NotSupportedImage,

      FailedToProcess, Timeout, or InternalServerError.
    syntax:
      content: >-
        function generateThumbnailInStream(width: number, height: number, image:
        msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams)
      parameters:
        - id: width
          type:
            - number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type:
            - number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - Models.ComputerVisionClientGenerateThumbnailInStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GenerateThumbnailInStreamResponse>
        description: Promise<Models.GenerateThumbnailInStreamResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.generateThumbnailInStream_1
    name: >-
      generateThumbnailInStream(number, number, msRest.HttpRequestBody,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateThumbnailInStream(width: number, height: number, image:
        msRest.HttpRequestBody, callback: ServiceCallback<void>)
      parameters:
        - id: width
          type:
            - number
          description: >-
            Width of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: height
          type:
            - number
          description: >-
            Height of the thumbnail, in pixels. It must be between 1 and 1024.
            Recommended

            minimum of 50.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterest
    name: 'getAreaOfInterest(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation returns a bounding box around the most important area of
      the image.

      A successful response will be returned in JSON. If the request failed, the
      response contains an

      error code and a message to help determine what went wrong.

      Upon failure, the error code and an error message are returned. The error
      code could be one of

      InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,
      FailedToProcess,

      Timeout, or InternalServerError.
    syntax:
      content: >-
        function getAreaOfInterest(url: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetAreaOfInterestResponse>
        description: Promise<Models.GetAreaOfInterestResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterest_2
    name: >-
      getAreaOfInterest(string, RequestOptionsBase,
      ServiceCallback<AreaOfInterestResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAreaOfInterest(url: string, options: RequestOptionsBase,
        callback: ServiceCallback<AreaOfInterestResult>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.AreaOfInterestResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterest_1
    name: 'getAreaOfInterest(string, ServiceCallback<AreaOfInterestResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAreaOfInterest(url: string, callback:
        ServiceCallback<AreaOfInterestResult>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.AreaOfInterestResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterestInStream
    name: >-
      getAreaOfInterestInStream(msRest.HttpRequestBody,
      msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation returns a bounding box around the most important area of
      the image.

      A successful response will be returned in JSON. If the request failed, the
      response contains an

      error code and a message to help determine what went wrong.

      Upon failure, the error code and an error message are returned. The error
      code could be one of

      InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage,
      FailedToProcess,

      Timeout, or InternalServerError.
    syntax:
      content: >-
        function getAreaOfInterestInStream(image: msRest.HttpRequestBody,
        options?: msRest.RequestOptionsBase)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetAreaOfInterestInStreamResponse>
        description: Promise<Models.GetAreaOfInterestInStreamResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterestInStream_2
    name: >-
      getAreaOfInterestInStream(msRest.HttpRequestBody, RequestOptionsBase,
      ServiceCallback<AreaOfInterestResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAreaOfInterestInStream(image: msRest.HttpRequestBody,
        options: RequestOptionsBase, callback:
        ServiceCallback<AreaOfInterestResult>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.AreaOfInterestResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getAreaOfInterestInStream_1
    name: >-
      getAreaOfInterestInStream(msRest.HttpRequestBody,
      ServiceCallback<AreaOfInterestResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAreaOfInterestInStream(image: msRest.HttpRequestBody,
        callback: ServiceCallback<AreaOfInterestResult>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.AreaOfInterestResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.getReadResult'
    name: 'getReadResult(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This interface is used for getting OCR results of Read operation. The URL
      to this interface

      should be retrieved from 'Operation-Location' field returned from Read
      interface.
    syntax:
      content: >-
        function getReadResult(operationId: string, options?:
        msRest.RequestOptionsBase)
      parameters:
        - id: operationId
          type:
            - string
          description: >-
            Id of read operation returned in the response of the 'Read'
            interface.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.GetReadResultResponse>
        description: Promise<Models.GetReadResultResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getReadResult_2
    name: >-
      getReadResult(string, RequestOptionsBase,
      ServiceCallback<ReadOperationResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getReadResult(operationId: string, options: RequestOptionsBase,
        callback: ServiceCallback<ReadOperationResult>)
      parameters:
        - id: operationId
          type:
            - string
          description: >-
            Id of read operation returned in the response of the 'Read'
            interface.
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ReadOperationResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.getReadResult_1
    name: 'getReadResult(string, ServiceCallback<ReadOperationResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getReadResult(operationId: string, callback:
        ServiceCallback<ReadOperationResult>)
      parameters:
        - id: operationId
          type:
            - string
          description: >-
            Id of read operation returned in the response of the 'Read'
            interface.
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ReadOperationResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.listModels'
    name: listModels(msRest.RequestOptionsBase)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation returns the list of domain-specific models that are
      supported by the Computer

      Vision API. Currently, the API supports following domain-specific models:
      celebrity recognizer,

      landmark recognizer.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    syntax:
      content: 'function listModels(options?: msRest.RequestOptionsBase)'
      parameters:
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ListModelsResponse>
        description: Promise<Models.ListModelsResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.listModels_2'
    name: 'listModels(RequestOptionsBase, ServiceCallback<ListModelsResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listModels(options: RequestOptionsBase, callback:
        ServiceCallback<ListModelsResult>)
      parameters:
        - id: options
          type:
            - RequestOptionsBase
          description: The optional parameters
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ListModelsResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.listModels_1'
    name: listModels(ServiceCallback<ListModelsResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listModels(callback: ServiceCallback<ListModelsResult>)'
      parameters:
        - id: callback
          type:
            - >-
              ServiceCallback<@azure/cognitiveservices-computervision.ListModelsResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.read_2'
    name: >-
      read(string, ComputerVisionClientReadOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function read(url: string, options:
        ComputerVisionClientReadOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientReadOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.read'
    name: 'read(string, Models.ComputerVisionClientReadOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Use this interface to get the result of a Read operation, employing the
      state-of-the-art Optical

      Character Recognition (OCR) algorithms optimized for text-heavy documents.
      When you use the Read

      interface, the response contains a field called 'Operation-Location'. The
      'Operation-Location'

      field contains the URL that you must use for your 'GetReadResult'
      operation to access OCR

      results.​
    syntax:
      content: >-
        function read(url: string, options?:
        Models.ComputerVisionClientReadOptionalParams)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - Models.ComputerVisionClientReadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ReadResponse>
        description: Promise<Models.ReadResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.read_1'
    name: 'read(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function read(url: string, callback: ServiceCallback<void>)'
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.readInStream_2
    name: >-
      readInStream(msRest.HttpRequestBody,
      ComputerVisionClientReadInStreamOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function readInStream(image: msRest.HttpRequestBody, options:
        ComputerVisionClientReadInStreamOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientReadInStreamOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.readInStream'
    name: >-
      readInStream(msRest.HttpRequestBody,
      Models.ComputerVisionClientReadInStreamOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Use this interface to get the result of a Read operation, employing the
      state-of-the-art Optical

      Character Recognition (OCR) algorithms optimized for text-heavy documents.
      When you use the Read

      interface, the response contains a field called 'Operation-Location'. The
      'Operation-Location'

      field contains the URL that you must use for your 'GetReadResult'
      operation to access OCR

      results.​
    syntax:
      content: >-
        function readInStream(image: msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientReadInStreamOptionalParams)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - Models.ComputerVisionClientReadInStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.ReadInStreamResponse>
        description: Promise<Models.ReadInStreamResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.readInStream_1
    name: 'readInStream(msRest.HttpRequestBody, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function readInStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<void>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedText_2
    name: >-
      recognizePrintedText(boolean, string,
      ComputerVisionClientRecognizePrintedTextOptionalParams,
      ServiceCallback<OcrResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recognizePrintedText(detectOrientation: boolean, url: string,
        options: ComputerVisionClientRecognizePrintedTextOptionalParams,
        callback: ServiceCallback<OcrResult>)
      parameters:
        - id: detectOrientation
          type:
            - boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientRecognizePrintedTextOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-computervision.OcrResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedText
    name: >-
      recognizePrintedText(boolean, string,
      Models.ComputerVisionClientRecognizePrintedTextOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Optical Character Recognition (OCR) detects text in an image and extracts
      the recognized

      characters into a machine-usable character stream.

      Upon success, the OCR results will be returned.

      Upon failure, the error code together with an error message will be
      returned. The error code can

      be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
      NotSupportedImage,

      NotSupportedLanguage, or InternalServerError.
    syntax:
      content: >-
        function recognizePrintedText(detectOrientation: boolean, url: string,
        options?: Models.ComputerVisionClientRecognizePrintedTextOptionalParams)
      parameters:
        - id: detectOrientation
          type:
            - boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - Models.ComputerVisionClientRecognizePrintedTextOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RecognizePrintedTextResponse>
        description: Promise<Models.RecognizePrintedTextResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedText_1
    name: 'recognizePrintedText(boolean, string, ServiceCallback<OcrResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recognizePrintedText(detectOrientation: boolean, url: string,
        callback: ServiceCallback<OcrResult>)
      parameters:
        - id: detectOrientation
          type:
            - boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-computervision.OcrResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedTextInStream_2
    name: >-
      recognizePrintedTextInStream(boolean, msRest.HttpRequestBody,
      ComputerVisionClientRecognizePrintedTextInStreamOptionalParams,
      ServiceCallback<OcrResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recognizePrintedTextInStream(detectOrientation: boolean, image:
        msRest.HttpRequestBody, options:
        ComputerVisionClientRecognizePrintedTextInStreamOptionalParams,
        callback: ServiceCallback<OcrResult>)
      parameters:
        - id: detectOrientation
          type:
            - boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-computervision.OcrResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedTextInStream
    name: >-
      recognizePrintedTextInStream(boolean, msRest.HttpRequestBody,
      Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Optical Character Recognition (OCR) detects text in an image and extracts
      the recognized

      characters into a machine-usable character stream.

      Upon success, the OCR results will be returned.

      Upon failure, the error code together with an error message will be
      returned. The error code can

      be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize,
      NotSupportedImage,

      NotSupportedLanguage, or InternalServerError.
    syntax:
      content: >-
        function recognizePrintedTextInStream(detectOrientation: boolean, image:
        msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams)
      parameters:
        - id: detectOrientation
          type:
            - boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - >-
              Models.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.RecognizePrintedTextInStreamResponse>
        description: Promise<Models.RecognizePrintedTextInStreamResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.recognizePrintedTextInStream_1
    name: >-
      recognizePrintedTextInStream(boolean, msRest.HttpRequestBody,
      ServiceCallback<OcrResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function recognizePrintedTextInStream(detectOrientation: boolean, image:
        msRest.HttpRequestBody, callback: ServiceCallback<OcrResult>)
      parameters:
        - id: detectOrientation
          type:
            - boolean
          description: >-
            Whether detect the text orientation in the image. With

            detectOrientation=true the OCR service tries to detect the image
            orientation and correct it

            before further processing (e.g. if it's upside-down).
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-computervision.OcrResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.sendOperationRequest
    name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>)
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type:
            - OperationSpec
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            The callback to call when the response is received.
          optional: true
      return:
        type:
          - Promise<RestResponse>
        description: ''
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResourceLike)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send the provided httpRequest.
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResourceLike)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResourceLike
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
        description: ''
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.tagImage_2'
    name: >-
      tagImage(string, ComputerVisionClientTagImageOptionalParams,
      ServiceCallback<TagResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function tagImage(url: string, options:
        ComputerVisionClientTagImageOptionalParams, callback:
        ServiceCallback<TagResult>)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientTagImageOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-computervision.TagResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.tagImage'
    name: 'tagImage(string, Models.ComputerVisionClientTagImageOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation generates a list of words, or tags, that are relevant to
      the content of the

      supplied image. The Computer Vision API can return tags based on objects,
      living beings, scenery

      or actions found in images. Unlike categories, tags are not organized
      according to a

      hierarchical classification system, but correspond to image content. Tags
      may contain hints to

      avoid ambiguity or provide context, for example the tag "ascomycete" may
      be accompanied by the

      hint "fungus".

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    syntax:
      content: >-
        function tagImage(url: string, options?:
        Models.ComputerVisionClientTagImageOptionalParams)
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: options
          type:
            - Models.ComputerVisionClientTagImageOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TagImageResponse>
        description: Promise<Models.TagImageResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClient.tagImage_1'
    name: 'tagImage(string, ServiceCallback<TagResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tagImage(url: string, callback: ServiceCallback<TagResult>)'
      parameters:
        - id: url
          type:
            - string
          description: Publicly reachable URL of an image.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-computervision.TagResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.tagImageInStream_2
    name: >-
      tagImageInStream(msRest.HttpRequestBody,
      ComputerVisionClientTagImageInStreamOptionalParams,
      ServiceCallback<TagResult>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function tagImageInStream(image: msRest.HttpRequestBody, options:
        ComputerVisionClientTagImageInStreamOptionalParams, callback:
        ServiceCallback<TagResult>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - >-
              @azure/cognitiveservices-computervision.ComputerVisionClientTagImageInStreamOptionalParams
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-computervision.TagResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.tagImageInStream
    name: >-
      tagImageInStream(msRest.HttpRequestBody,
      Models.ComputerVisionClientTagImageInStreamOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This operation generates a list of words, or tags, that are relevant to
      the content of the

      supplied image. The Computer Vision API can return tags based on objects,
      living beings, scenery

      or actions found in images. Unlike categories, tags are not organized
      according to a

      hierarchical classification system, but correspond to image content. Tags
      may contain hints to

      avoid ambiguity or provide context, for example the tag "ascomycete" may
      be accompanied by the

      hint "fungus".

      Two input methods are supported -- (1) Uploading an image or (2)
      specifying an image URL.

      A successful response will be returned in JSON. If the request failed, the
      response will contain

      an error code and a message to help understand what went wrong.
    syntax:
      content: >-
        function tagImageInStream(image: msRest.HttpRequestBody, options?:
        Models.ComputerVisionClientTagImageInStreamOptionalParams)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: options
          type:
            - Models.ComputerVisionClientTagImageInStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.TagImageInStreamResponse>
        description: Promise<Models.TagImageInStreamResponse>
    package: '@azure/cognitiveservices-computervision'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClient.tagImageInStream_1
    name: 'tagImageInStream(msRest.HttpRequestBody, ServiceCallback<TagResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function tagImageInStream(image: msRest.HttpRequestBody, callback:
        ServiceCallback<TagResult>)
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: An image stream.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-computervision.TagResult>
          description: |
            The callback
    package: '@azure/cognitiveservices-computervision'
references:
  - uid: '@azure/cognitiveservices-computervision.ComputerVisionClientContext'
    name: ComputerVisionClientContext
    spec.typeScript:
      - name: ComputerVisionClientContext
        fullName: ComputerVisionClientContext
        uid: '@azure/cognitiveservices-computervision.ComputerVisionClientContext'
  - uid: ServiceCallback<@azure/cognitiveservices-computervision.ImageAnalysis>
    name: ImageAnalysis>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ImageAnalysis
        fullName: ImageAnalysis
        uid: '@azure/cognitiveservices-computervision.ImageAnalysis'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageOptionalParams
    name: ComputerVisionClientAnalyzeImageOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientAnalyzeImageOptionalParams
        fullName: ComputerVisionClientAnalyzeImageOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageOptionalParams
  - uid: >-
      ServiceCallback<@azure/cognitiveservices-computervision.DomainModelResults>
    name: DomainModelResults>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DomainModelResults
        fullName: DomainModelResults
        uid: '@azure/cognitiveservices-computervision.DomainModelResults'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageByDomainOptionalParams
    name: ComputerVisionClientAnalyzeImageByDomainOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientAnalyzeImageByDomainOptionalParams
        fullName: ComputerVisionClientAnalyzeImageByDomainOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageByDomainOptionalParams
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams
    name: ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams
        fullName: ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageByDomainInStreamOptionalParams
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageInStreamOptionalParams
    name: ComputerVisionClientAnalyzeImageInStreamOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientAnalyzeImageInStreamOptionalParams
        fullName: ComputerVisionClientAnalyzeImageInStreamOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientAnalyzeImageInStreamOptionalParams
  - uid: ServiceCallback<@azure/cognitiveservices-computervision.ImageDescription>
    name: ImageDescription>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ImageDescription
        fullName: ImageDescription
        uid: '@azure/cognitiveservices-computervision.ImageDescription'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientDescribeImageOptionalParams
    name: ComputerVisionClientDescribeImageOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientDescribeImageOptionalParams
        fullName: ComputerVisionClientDescribeImageOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientDescribeImageOptionalParams
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientDescribeImageInStreamOptionalParams
    name: ComputerVisionClientDescribeImageInStreamOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientDescribeImageInStreamOptionalParams
        fullName: ComputerVisionClientDescribeImageInStreamOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientDescribeImageInStreamOptionalParams
  - uid: ServiceCallback<@azure/cognitiveservices-computervision.DetectResult>
    name: DetectResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectResult
        fullName: DetectResult
        uid: '@azure/cognitiveservices-computervision.DetectResult'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientGenerateThumbnailOptionalParams
    name: ComputerVisionClientGenerateThumbnailOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientGenerateThumbnailOptionalParams
        fullName: ComputerVisionClientGenerateThumbnailOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientGenerateThumbnailOptionalParams
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientGenerateThumbnailInStreamOptionalParams
    name: ComputerVisionClientGenerateThumbnailInStreamOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientGenerateThumbnailInStreamOptionalParams
        fullName: ComputerVisionClientGenerateThumbnailInStreamOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientGenerateThumbnailInStreamOptionalParams
  - uid: >-
      ServiceCallback<@azure/cognitiveservices-computervision.AreaOfInterestResult>
    name: AreaOfInterestResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: AreaOfInterestResult
        fullName: AreaOfInterestResult
        uid: '@azure/cognitiveservices-computervision.AreaOfInterestResult'
      - name: '>'
        fullName: '>'
  - uid: >-
      ServiceCallback<@azure/cognitiveservices-computervision.ReadOperationResult>
    name: ReadOperationResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ReadOperationResult
        fullName: ReadOperationResult
        uid: '@azure/cognitiveservices-computervision.ReadOperationResult'
      - name: '>'
        fullName: '>'
  - uid: ServiceCallback<@azure/cognitiveservices-computervision.ListModelsResult>
    name: ListModelsResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ListModelsResult
        fullName: ListModelsResult
        uid: '@azure/cognitiveservices-computervision.ListModelsResult'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientReadOptionalParams
    name: ComputerVisionClientReadOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientReadOptionalParams
        fullName: ComputerVisionClientReadOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientReadOptionalParams
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientReadInStreamOptionalParams
    name: ComputerVisionClientReadInStreamOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientReadInStreamOptionalParams
        fullName: ComputerVisionClientReadInStreamOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientReadInStreamOptionalParams
  - uid: ServiceCallback<@azure/cognitiveservices-computervision.OcrResult>
    name: OcrResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: OcrResult
        fullName: OcrResult
        uid: '@azure/cognitiveservices-computervision.OcrResult'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientRecognizePrintedTextOptionalParams
    name: ComputerVisionClientRecognizePrintedTextOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientRecognizePrintedTextOptionalParams
        fullName: ComputerVisionClientRecognizePrintedTextOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientRecognizePrintedTextOptionalParams
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams
    name: ComputerVisionClientRecognizePrintedTextInStreamOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientRecognizePrintedTextInStreamOptionalParams
        fullName: ComputerVisionClientRecognizePrintedTextInStreamOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientRecognizePrintedTextInStreamOptionalParams
  - uid: ServiceCallback<@azure/cognitiveservices-computervision.TagResult>
    name: TagResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TagResult
        fullName: TagResult
        uid: '@azure/cognitiveservices-computervision.TagResult'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientTagImageOptionalParams
    name: ComputerVisionClientTagImageOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientTagImageOptionalParams
        fullName: ComputerVisionClientTagImageOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientTagImageOptionalParams
  - uid: >-
      @azure/cognitiveservices-computervision.ComputerVisionClientTagImageInStreamOptionalParams
    name: ComputerVisionClientTagImageInStreamOptionalParams
    spec.typeScript:
      - name: ComputerVisionClientTagImageInStreamOptionalParams
        fullName: ComputerVisionClientTagImageInStreamOptionalParams
        uid: >-
          @azure/cognitiveservices-computervision.ComputerVisionClientTagImageInStreamOptionalParams
