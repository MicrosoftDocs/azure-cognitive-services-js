### YamlMime:UniversalReference
items:
  - uid: microsoft-cognitiveservices-speech-sdk.IConversation
    name: IConversation
    fullName: IConversation
    children:
      - microsoft-cognitiveservices-speech-sdk.IConversation.authorizationToken
      - microsoft-cognitiveservices-speech-sdk.IConversation.config
      - microsoft-cognitiveservices-speech-sdk.IConversation.conversationId
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.deleteConversationAsync
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.endConversationAsync
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.lockConversationAsync
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.muteAllParticipantsAsync
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.muteParticipantAsync
      - microsoft-cognitiveservices-speech-sdk.IConversation.properties
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.removeParticipantAsync
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.speechRecognitionLanguage
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.startConversationAsync
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.unlockConversationAsync
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.unmuteAllParticipantsAsync
      - >-
        microsoft-cognitiveservices-speech-sdk.IConversation.unmuteParticipantAsync
    langs:
      - typeScript
    type: interface
    summary: |-
      Manages conversations.
      Added in version 1.4.0
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IConversation.authorizationToken
    name: authorizationToken
    fullName: authorizationToken
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Gets/sets authorization token used to communicate with the service.

      Note: The caller needs to ensure that the authorization token is valid.
      Before the authorization token

      expires, the caller needs to refresh it by calling this setter with a new
      valid token.

      Otherwise, the recognizer will encounter errors during recognition.
    syntax:
      content: 'authorizationToken: string'
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IConversation.config
    name: config
    fullName: config
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'config: SpeechTranslationConfig'
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.SpeechTranslationConfig
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IConversation.conversationId
    name: conversationId
    fullName: conversationId
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the unique identifier for the current conversation.
    syntax:
      content: 'conversationId: string'
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.IConversation.deleteConversationAsync
    name: 'deleteConversationAsync(() => void, (e: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete a conversation. After this no one will be able to join the
      conversation.
    syntax:
      content: >-
        function deleteConversationAsync(cb?: () => void, err?: (e: string) =>
        void)
      parameters:
        - id: cb
          type:
            - () => void
          description: ''
          optional: true
        - id: err
          type:
            - '(e: string) => void'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IConversation.endConversationAsync
    name: 'endConversationAsync(() => void, (e: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: End a conversation.
    syntax:
      content: >-
        function endConversationAsync(cb?: () => void, err?: (e: string) =>
        void)
      parameters:
        - id: cb
          type:
            - () => void
          description: ''
          optional: true
        - id: err
          type:
            - '(e: string) => void'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IConversation.lockConversationAsync
    name: 'lockConversationAsync(() => void, (e: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Lock a conversation. This will prevent new participants from joining.
    syntax:
      content: >-
        function lockConversationAsync(cb?: () => void, err?: (e: string) =>
        void)
      parameters:
        - id: cb
          type:
            - () => void
          description: ''
          optional: true
        - id: err
          type:
            - '(e: string) => void'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.IConversation.muteAllParticipantsAsync
    name: 'muteAllParticipantsAsync(() => void, (e: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Mute all other participants in the conversation. After this no other
      participants will

      have their speech recognitions broadcast, nor be able to send text
      messages.
    syntax:
      content: >-
        function muteAllParticipantsAsync(cb?: () => void, err?: (e: string) =>
        void)
      parameters:
        - id: cb
          type:
            - () => void
          description: ''
          optional: true
        - id: err
          type:
            - '(e: string) => void'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IConversation.muteParticipantAsync
    name: 'muteParticipantAsync(string, () => void, (e: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Mute a participant.
    syntax:
      content: >-
        function muteParticipantAsync(userId: string, cb?: () => void, err?: (e:
        string) => void)
      parameters:
        - id: userId
          type:
            - string
          description: |
            A user identifier
        - id: cb
          type:
            - () => void
          description: ''
          optional: true
        - id: err
          type:
            - '(e: string) => void'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IConversation.properties
    name: properties
    fullName: properties
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Gets the collection of properties and their values defined for this
      instance.
    syntax:
      content: 'properties: PropertyCollection'
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.PropertyCollection
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.IConversation.removeParticipantAsync
    name: >-
      removeParticipantAsync(string | IParticipant | IUser, () => void, (e:
      string) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Remove a participant from a conversation using the user id, Participant or
      User object
    syntax:
      content: >-
        function removeParticipantAsync(userId: string | IParticipant | IUser,
        cb?: () => void, err?: (e: string) => void)
      parameters:
        - id: userId
          type:
            - >-
              string | microsoft-cognitiveservices-speech-sdk.IParticipant |
              microsoft-cognitiveservices-speech-sdk.IUser
          description: |
            A user identifier
        - id: cb
          type:
            - () => void
          description: ''
          optional: true
        - id: err
          type:
            - '(e: string) => void'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.IConversation.speechRecognitionLanguage
    name: speechRecognitionLanguage
    fullName: speechRecognitionLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the language name that is used for recognition.
    syntax:
      content: 'speechRecognitionLanguage: string'
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.IConversation.startConversationAsync
    name: 'startConversationAsync(() => void, (e: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Start a conversation.
       The host must connect to the websocket within a minute for the conversation to remain open.
    syntax:
      content: >-
        function startConversationAsync(cb?: () => void, err?: (e: string) =>
        void)
      parameters:
        - id: cb
          type:
            - () => void
          description: ''
          optional: true
        - id: err
          type:
            - '(e: string) => void'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.IConversation.unlockConversationAsync
    name: unlockConversationAsync()
    children: []
    type: method
    langs:
      - typeScript
    summary: Unlocks a conversation.
    syntax:
      content: function unlockConversationAsync()
      parameters: []
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.IConversation.unmuteAllParticipantsAsync
    name: 'unmuteAllParticipantsAsync(() => void, (e: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Unmute all other participants in the conversation.
    syntax:
      content: >-
        function unmuteAllParticipantsAsync(cb?: () => void, err?: (e: string)
        => void)
      parameters:
        - id: cb
          type:
            - () => void
          description: ''
          optional: true
        - id: err
          type:
            - '(e: string) => void'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.IConversation.unmuteParticipantAsync
    name: 'unmuteParticipantAsync(string, () => void, (e: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Unmute a participant.
    syntax:
      content: >-
        function unmuteParticipantAsync(userId: string, cb?: () => void, err?:
        (e: string) => void)
      parameters:
        - id: userId
          type:
            - string
          description: |
            A user identifier
        - id: cb
          type:
            - () => void
          description: ''
          optional: true
        - id: err
          type:
            - '(e: string) => void'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
references:
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechTranslationConfig
    name: SpeechTranslationConfig
    spec.typeScript:
      - name: SpeechTranslationConfig
        fullName: SpeechTranslationConfig
        uid: microsoft-cognitiveservices-speech-sdk.SpeechTranslationConfig
  - uid: microsoft-cognitiveservices-speech-sdk.PropertyCollection
    name: PropertyCollection
    spec.typeScript:
      - name: PropertyCollection
        fullName: PropertyCollection
        uid: microsoft-cognitiveservices-speech-sdk.PropertyCollection
  - uid: >-
      string | microsoft-cognitiveservices-speech-sdk.IParticipant |
      microsoft-cognitiveservices-speech-sdk.IUser
    name: IUser
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: IParticipant
        fullName: IParticipant
        uid: microsoft-cognitiveservices-speech-sdk.IParticipant
      - name: ' | '
        fullName: ' | '
      - name: IUser
        fullName: IUser
        uid: microsoft-cognitiveservices-speech-sdk.IUser
