### YamlMime:UniversalReference
items:
  - uid: microsoft-cognitiveservices-speech-sdk.Queue
    name: Queue
    fullName: Queue<TItem>
    children:
      - microsoft-cognitiveservices-speech-sdk.Queue.dequeue
      - microsoft-cognitiveservices-speech-sdk.Queue.dispose
      - microsoft-cognitiveservices-speech-sdk.Queue.drainAndDispose
      - microsoft-cognitiveservices-speech-sdk.Queue.enqueue
      - microsoft-cognitiveservices-speech-sdk.Queue.enqueueFromPromise
      - microsoft-cognitiveservices-speech-sdk.Queue.isDisposed
      - microsoft-cognitiveservices-speech-sdk.Queue.length
      - microsoft-cognitiveservices-speech-sdk.Queue.peek
      - microsoft-cognitiveservices-speech-sdk.Queue.constructor
    langs:
      - typeScript
    type: class
    summary: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.Queue.dequeue
    name: dequeue
    fullName: dequeue
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'dequeue: () => Promise<TItem>'
      return:
        type:
          - () => Promise<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.Queue.dispose
    name: dispose
    fullName: dispose
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'dispose: (reason?: string) => void'
      return:
        type:
          - '(reason?: string) => void'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.Queue.drainAndDispose
    name: drainAndDispose
    fullName: drainAndDispose
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: >-
        drainAndDispose: (pendingItemProcessor: (pendingItemInQueue: TItem) =>
        void, reason?: string) => Promise<boolean>
      return:
        type:
          - >-
            (pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?:
            string) => Promise<boolean>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.Queue.enqueue
    name: enqueue
    fullName: enqueue
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'enqueue: (item: TItem) => void'
      return:
        type:
          - '(item: TItem) => void'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.Queue.enqueueFromPromise
    name: enqueueFromPromise
    fullName: enqueueFromPromise
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'enqueueFromPromise: (promise: Promise<TItem>) => void'
      return:
        type:
          - '(promise: Promise<TItem>) => void'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.Queue.isDisposed
    name: isDisposed
    fullName: isDisposed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'isDisposed: () => boolean'
      return:
        type:
          - () => boolean
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.Queue.length
    name: length
    fullName: length
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'length: () => number'
      return:
        type:
          - () => number
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.Queue.peek
    name: peek
    fullName: peek
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'peek: () => Promise<TItem>'
      return:
        type:
          - () => Promise<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.Queue.constructor
    name: Queue(List<TItem>)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new Queue(list?: List<TItem>)'
      parameters:
        - id: list
          type:
            - microsoft-cognitiveservices-speech-sdk.List<TItem>
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
references:
  - uid: microsoft-cognitiveservices-speech-sdk.List<TItem>
    name: List<TItem>
    spec.typeScript:
      - name: List
        fullName: List
        uid: microsoft-cognitiveservices-speech-sdk.List
      - name: <TItem>
        fullName: <TItem>
