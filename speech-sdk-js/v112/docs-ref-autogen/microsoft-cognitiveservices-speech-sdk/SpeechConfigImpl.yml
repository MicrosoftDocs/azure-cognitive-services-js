### YamlMime:UniversalReference
items:
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl
    name: SpeechConfigImpl
    fullName: SpeechConfigImpl
    children:
      - >-
        microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.authorizationToken
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.clone
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.close
      - >-
        microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.enableAudioLogging
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.enableDictation
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.endPoint
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.endpointId
      - >-
        microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.fromAuthorizationToken
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.fromEndpoint
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.fromHost
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.fromSubscription
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.getProperty
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.outputFormat
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.properties
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.region
      - >-
        microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.requestWordLevelTimestamps
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.setProfanity
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.setProperty
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.setProxy
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.setProxy_1
      - >-
        microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.setServiceProperty
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.constructor
      - >-
        microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.speechRecognitionLanguage
      - >-
        microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.speechSynthesisLanguage
      - >-
        microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.speechSynthesisOutputFormat
      - >-
        microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.speechSynthesisVoiceName
      - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.subscriptionKey
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: microsoft-cognitiveservices-speech-sdk.SpeechConfig
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.authorizationToken
    name: authorizationToken
    fullName: authorizationToken
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string authorizationToken
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.clone
    name: clone()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function clone()
      parameters: []
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.close
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes the configuration.
    syntax:
      content: function close()
      parameters: []
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.enableAudioLogging
    name: enableAudioLogging()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function enableAudioLogging()
      parameters: []
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.enableDictation
    name: enableDictation()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function enableDictation()
      parameters: []
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.endPoint
    name: endPoint
    fullName: endPoint
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: URL endPoint
      return:
        type:
          - URL
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.endpointId
    name: endpointId
    fullName: endpointId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string endpointId
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.fromAuthorizationToken
    name: 'fromAuthorizationToken(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an instance of the speech factory with specified initial
      authorization token and region.

      Note: The caller needs to ensure that the authorization token is valid.
      Before the authorization token
            expires, the caller needs to refresh it by calling this setter with a new valid token.
      Note: Please use a token derived from your LanguageUnderstanding
      subscription key in case you want
            to use the Intent recognizer. As configuration values are copied when creating a new recognizer,
            the new token value will not apply to recognizers that have already been created. For recognizers
            that have been created before, you need to set authorization token of the corresponding recognizer
            to refresh the token. Otherwise, the recognizers will encounter errors during recognition.
    syntax:
      content: >-
        static function fromAuthorizationToken(authorizationToken: string,
        region: string)
      parameters:
        - id: authorizationToken
          type:
            - string
          description: The initial authorization token.
        - id: region
          type:
            - string
          description: >-
            The region name (see the <a
            href="https://aka.ms/csspeech/region">region page</a>).
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.SpeechConfig
        description: A speech factory instance.
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.fromEndpoint
    name: 'fromEndpoint(URL, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an instance of the speech config with specified endpoint and
      subscription key.

      This method is intended only for users who use a non-standard service
      endpoint or parameters.

      Note: Please use your LanguageUnderstanding subscription key in case you
      want to use the Intent recognizer.

      Note: The query parameters specified in the endpoint URL are not changed,
      even if they are set by any other APIs.

      For example, if language is defined in the uri as query parameter
      "language=de-DE", and also set by
                   SpeechConfig.speechRecognitionLanguage = "en-US", the language setting in uri takes precedence,
                   and the effective language is "de-DE". Only the parameters that are not specified in the
                   endpoint URL can be set by other APIs.
      Note: To use authorization token with fromEndpoint, pass an empty string
      to the subscriptionKey in the
            fromEndpoint method, and then set authorizationToken="token" on the created SpeechConfig instance to
            use the authorization token.
    syntax:
      content: 'static function fromEndpoint(endpoint: URL, subscriptionKey?: string)'
      parameters:
        - id: endpoint
          type:
            - URL
          description: The service endpoint to connect to.
        - id: subscriptionKey
          type:
            - string
          description: >-
            The subscription key. If a subscription key is not specified, an
            authorization token must be set.
          optional: true
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.SpeechConfig
        description: A speech factory instance.
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.fromHost
    name: 'fromHost(URL, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates an instance of the speech config with specified host and
      subscription key.

      This method is intended only for users who use a non-default service host.
      Standard resource path will be assumed.

      For services with a non-standard resource path or no path at all, use
      fromEndpoint instead.

      Note: Query parameters are not allowed in the host URI and must be set by
      other APIs.

      Note: To use an authorization token with fromHost, use fromHost(URL),

      and then set the AuthorizationToken property on the created SpeechConfig
      instance.

      Note: Added in version 1.9.0.
    syntax:
      content: 'static function fromHost(hostName: URL, subscriptionKey?: string)'
      parameters:
        - id: hostName
          type:
            - URL
          description: ''
        - id: subscriptionKey
          type:
            - string
          description: >-
            The subscription key. If a subscription key is not specified, an
            authorization token must be set.
          optional: true
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.SpeechConfig
        description: A speech factory instance.
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.fromSubscription
    name: 'fromSubscription(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Static instance of SpeechConfig returned by passing subscriptionKey and
      service region.

      Note: Please use your LanguageUnderstanding subscription key in case you
      want to use the Intent recognizer.
    syntax:
      content: >-
        static function fromSubscription(subscriptionKey: string, region:
        string)
      parameters:
        - id: subscriptionKey
          type:
            - string
          description: The subscription key.
        - id: region
          type:
            - string
          description: >-
            The region name (see the <a
            href="https://aka.ms/csspeech/region">region page</a>).
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.SpeechConfig
        description: The speech factory
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.getProperty
    name: 'getProperty(string | PropertyId, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProperty(name: string | PropertyId, def?: string)'
      parameters:
        - id: name
          type:
            - string | microsoft-cognitiveservices-speech-sdk.PropertyId
          description: ''
        - id: def
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.outputFormat
    name: outputFormat
    fullName: outputFormat
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: OutputFormat outputFormat
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.OutputFormat
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.properties
    name: properties
    fullName: properties
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: PropertyCollection properties
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.PropertyCollection
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.region
    name: region
    fullName: region
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string region
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.requestWordLevelTimestamps
    name: requestWordLevelTimestamps()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function requestWordLevelTimestamps()
      parameters: []
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.setProfanity
    name: setProfanity(ProfanityOption)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setProfanity(profanity: ProfanityOption)'
      parameters:
        - id: profanity
          type:
            - microsoft-cognitiveservices-speech-sdk.ProfanityOption
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.setProperty
    name: 'setProperty(string | PropertyId, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setProperty(name: string | PropertyId, value: string)'
      parameters:
        - id: name
          type:
            - string | microsoft-cognitiveservices-speech-sdk.PropertyId
          description: ''
        - id: value
          type:
            - string
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.setProxy
    name: 'setProxy(string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setProxy(proxyHostName: string, proxyPort: number)'
      parameters:
        - id: proxyHostName
          type:
            - string
          description: ''
        - id: proxyPort
          type:
            - number
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.setProxy_1
    name: 'setProxy(string, number, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setProxy(proxyHostName: string, proxyPort: number,
        proxyUserName: string, proxyPassword: string)
      parameters:
        - id: proxyHostName
          type:
            - string
          description: ''
        - id: proxyPort
          type:
            - number
          description: ''
        - id: proxyUserName
          type:
            - string
          description: ''
        - id: proxyPassword
          type:
            - string
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.setServiceProperty
    name: 'setServiceProperty(string, string, ServicePropertyChannel)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setServiceProperty(name: string, value: string, channel:
        ServicePropertyChannel)
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: value
          type:
            - string
          description: ''
        - id: channel
          type:
            - microsoft-cognitiveservices-speech-sdk.ServicePropertyChannel
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.constructor
    name: SpeechConfigImpl()
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: new SpeechConfigImpl()
      parameters: []
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.speechRecognitionLanguage
    name: speechRecognitionLanguage
    fullName: speechRecognitionLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string speechRecognitionLanguage
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.speechSynthesisLanguage
    name: speechSynthesisLanguage
    fullName: speechSynthesisLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string speechSynthesisLanguage
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.speechSynthesisOutputFormat
    name: speechSynthesisOutputFormat
    fullName: speechSynthesisOutputFormat
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: SpeechSynthesisOutputFormat speechSynthesisOutputFormat
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.SpeechSynthesisOutputFormat
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.speechSynthesisVoiceName
    name: speechSynthesisVoiceName
    fullName: speechSynthesisVoiceName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string speechSynthesisVoiceName
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl.subscriptionKey
    name: subscriptionKey
    fullName: subscriptionKey
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string subscriptionKey
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
references:
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfig
    name: SpeechConfig
    spec.typeScript:
      - name: SpeechConfig
        fullName: SpeechConfig
        uid: microsoft-cognitiveservices-speech-sdk.SpeechConfig
  - uid: microsoft-cognitiveservices-speech-sdk.OutputFormat
    name: OutputFormat
    spec.typeScript:
      - name: OutputFormat
        fullName: OutputFormat
        uid: microsoft-cognitiveservices-speech-sdk.OutputFormat
  - uid: microsoft-cognitiveservices-speech-sdk.PropertyCollection
    name: PropertyCollection
    spec.typeScript:
      - name: PropertyCollection
        fullName: PropertyCollection
        uid: microsoft-cognitiveservices-speech-sdk.PropertyCollection
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechSynthesisOutputFormat
    name: SpeechSynthesisOutputFormat
    spec.typeScript:
      - name: SpeechSynthesisOutputFormat
        fullName: SpeechSynthesisOutputFormat
        uid: microsoft-cognitiveservices-speech-sdk.SpeechSynthesisOutputFormat
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl
    name: SpeechConfigImpl
    spec.typeScript:
      - name: SpeechConfigImpl
        fullName: SpeechConfigImpl
        uid: microsoft-cognitiveservices-speech-sdk.SpeechConfigImpl
  - uid: string | microsoft-cognitiveservices-speech-sdk.PropertyId
    name: PropertyId
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: PropertyId
        fullName: PropertyId
        uid: microsoft-cognitiveservices-speech-sdk.PropertyId
  - uid: microsoft-cognitiveservices-speech-sdk.ProfanityOption
    name: ProfanityOption
    spec.typeScript:
      - name: ProfanityOption
        fullName: ProfanityOption
        uid: microsoft-cognitiveservices-speech-sdk.ProfanityOption
  - uid: microsoft-cognitiveservices-speech-sdk.ServicePropertyChannel
    name: ServicePropertyChannel
    spec.typeScript:
      - name: ServicePropertyChannel
        fullName: ServicePropertyChannel
        uid: microsoft-cognitiveservices-speech-sdk.ServicePropertyChannel
