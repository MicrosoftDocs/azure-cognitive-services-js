### YamlMime:UniversalReference
items:
  - uid: microsoft-cognitiveservices-speech-sdk.List
    name: List
    fullName: List<TItem>
    children:
      - microsoft-cognitiveservices-speech-sdk.List.add
      - microsoft-cognitiveservices-speech-sdk.List.all
      - microsoft-cognitiveservices-speech-sdk.List.any
      - microsoft-cognitiveservices-speech-sdk.List.clear
      - microsoft-cognitiveservices-speech-sdk.List.clone
      - microsoft-cognitiveservices-speech-sdk.List.concat
      - microsoft-cognitiveservices-speech-sdk.List.concatArray
      - microsoft-cognitiveservices-speech-sdk.List.dispose
      - microsoft-cognitiveservices-speech-sdk.List.first
      - microsoft-cognitiveservices-speech-sdk.List.forEach
      - microsoft-cognitiveservices-speech-sdk.List.get
      - microsoft-cognitiveservices-speech-sdk.List.insertAt
      - microsoft-cognitiveservices-speech-sdk.List.isDisposed
      - microsoft-cognitiveservices-speech-sdk.List.join
      - microsoft-cognitiveservices-speech-sdk.List.last
      - microsoft-cognitiveservices-speech-sdk.List.length
      - microsoft-cognitiveservices-speech-sdk.List.constructor
      - microsoft-cognitiveservices-speech-sdk.List.onAdded
      - microsoft-cognitiveservices-speech-sdk.List.onDisposed
      - microsoft-cognitiveservices-speech-sdk.List.onRemoved
      - microsoft-cognitiveservices-speech-sdk.List.orderBy
      - microsoft-cognitiveservices-speech-sdk.List.orderByDesc
      - microsoft-cognitiveservices-speech-sdk.List.remove
      - microsoft-cognitiveservices-speech-sdk.List.removeAt
      - microsoft-cognitiveservices-speech-sdk.List.removeFirst
      - microsoft-cognitiveservices-speech-sdk.List.removeLast
      - microsoft-cognitiveservices-speech-sdk.List.select
      - microsoft-cognitiveservices-speech-sdk.List.toArray
      - microsoft-cognitiveservices-speech-sdk.List.where
    langs:
      - typeScript
    type: class
    summary: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.add
    name: add
    fullName: add
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'add: (item: TItem) => void'
      return:
        type:
          - '(item: TItem) => void'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.all
    name: all
    fullName: all
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'all: (callback: (item: TItem) => boolean) => boolean'
      return:
        type:
          - '(callback: (item: TItem) => boolean) => boolean'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.any
    name: any
    fullName: any
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'any: (callback?: (item: TItem, index: number) => boolean) => boolean'
      return:
        type:
          - '(callback?: (item: TItem, index: number) => boolean) => boolean'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.clear
    name: clear
    fullName: clear
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'clear: () => void'
      return:
        type:
          - () => void
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.clone
    name: clone
    fullName: clone
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'clone: () => List<TItem>'
      return:
        type:
          - () => List<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.concat
    name: concat
    fullName: concat
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'concat: (list: List<TItem>) => List<TItem>'
      return:
        type:
          - '(list: List<TItem>) => List<TItem>'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.concatArray
    name: concatArray
    fullName: concatArray
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'concatArray: (array: TItem[]) => List<TItem>'
      return:
        type:
          - '(array: TItem[]) => List<TItem>'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.dispose
    name: dispose
    fullName: dispose
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'dispose: (reason?: string) => void'
      return:
        type:
          - '(reason?: string) => void'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.first
    name: first
    fullName: first
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'first: () => TItem'
      return:
        type:
          - () => TItem
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.forEach
    name: forEach
    fullName: forEach
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'forEach: (callback: (item: TItem, index: number) => void) => void'
      return:
        type:
          - '(callback: (item: TItem, index: number) => void) => void'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.get
    name: get
    fullName: get
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'get: (itemIndex: number) => TItem'
      return:
        type:
          - '(itemIndex: number) => TItem'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.insertAt
    name: insertAt
    fullName: insertAt
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'insertAt: (index: number, item: TItem) => void'
      return:
        type:
          - '(index: number, item: TItem) => void'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.isDisposed
    name: isDisposed
    fullName: isDisposed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'isDisposed: () => boolean'
      return:
        type:
          - () => boolean
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.join
    name: join
    fullName: join
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'join: (seperator?: string) => string'
      return:
        type:
          - '(seperator?: string) => string'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.last
    name: last
    fullName: last
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'last: () => TItem'
      return:
        type:
          - () => TItem
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.length
    name: length
    fullName: length
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'length: () => number'
      return:
        type:
          - () => number
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.constructor
    name: 'List(TItem[])'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new List(list?: TItem[])'
      parameters:
        - id: list
          type:
            - 'TItem[]'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.onAdded
    name: onAdded
    fullName: onAdded
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'onAdded: (addedCallback: () => void) => IDetachable'
      return:
        type:
          - '(addedCallback: () => void) => IDetachable'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.onDisposed
    name: onDisposed
    fullName: onDisposed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'onDisposed: (disposedCallback: () => void) => IDetachable'
      return:
        type:
          - '(disposedCallback: () => void) => IDetachable'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.onRemoved
    name: onRemoved
    fullName: onRemoved
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'onRemoved: (removedCallback: () => void) => IDetachable'
      return:
        type:
          - '(removedCallback: () => void) => IDetachable'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.orderBy
    name: orderBy
    fullName: orderBy
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'orderBy: (compareFn: (a: TItem, b: TItem) => number) => List<TItem>'
      return:
        type:
          - '(compareFn: (a: TItem, b: TItem) => number) => List<TItem>'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.orderByDesc
    name: orderByDesc
    fullName: orderByDesc
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'orderByDesc: (compareFn: (a: TItem, b: TItem) => number) => List<TItem>'
      return:
        type:
          - '(compareFn: (a: TItem, b: TItem) => number) => List<TItem>'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.remove
    name: remove
    fullName: remove
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'remove: (index: number, count: number) => TItem[]'
      return:
        type:
          - '(index: number, count: number) => TItem[]'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.removeAt
    name: removeAt
    fullName: removeAt
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'removeAt: (index: number) => TItem'
      return:
        type:
          - '(index: number) => TItem'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.removeFirst
    name: removeFirst
    fullName: removeFirst
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'removeFirst: () => TItem'
      return:
        type:
          - () => TItem
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.removeLast
    name: removeLast
    fullName: removeLast
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'removeLast: () => TItem'
      return:
        type:
          - () => TItem
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.select
    name: select
    fullName: select
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'select: (callback: (item: TItem, index: number) => T2) => List<T2>'
      return:
        type:
          - '(callback: (item: TItem, index: number) => T2) => List<T2>'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.toArray
    name: toArray
    fullName: toArray
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'toArray: () => TItem[]'
      return:
        type:
          - '() => TItem[]'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.List.where
    name: where
    fullName: where
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: >-
        where: (callback: (item: TItem, index: number) => boolean) =>
        List<TItem>
      return:
        type:
          - '(callback: (item: TItem, index: number) => boolean) => List<TItem>'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
