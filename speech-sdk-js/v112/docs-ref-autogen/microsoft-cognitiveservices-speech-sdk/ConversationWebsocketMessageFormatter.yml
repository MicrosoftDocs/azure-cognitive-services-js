### YamlMime:UniversalReference
items:
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.ConversationWebsocketMessageFormatter
    name: ConversationWebsocketMessageFormatter
    fullName: ConversationWebsocketMessageFormatter
    children:
      - >-
        microsoft-cognitiveservices-speech-sdk.ConversationWebsocketMessageFormatter.fromConnectionMessage
      - >-
        microsoft-cognitiveservices-speech-sdk.ConversationWebsocketMessageFormatter.toConnectionMessage
    langs:
      - typeScript
    type: class
    summary: >-
      Based off WebsocketMessageFormatter. The messages for Conversation
      Translator have some variations from the Speech messages.
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.ConversationWebsocketMessageFormatter.fromConnectionMessage
    name: fromConnectionMessage
    fullName: fromConnectionMessage
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Format outgoing messages: text (commands or IM)'
    syntax:
      content: >-
        fromConnectionMessage: (message: ConnectionMessage) =>
        Promise<RawWebsocketMessage>
      return:
        type:
          - '(message: ConnectionMessage) => Promise<RawWebsocketMessage>'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.ConversationWebsocketMessageFormatter.toConnectionMessage
    name: toConnectionMessage
    fullName: toConnectionMessage
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Format incoming messages: text (speech partial/final, IM) or binary (tts)'
    syntax:
      content: >-
        toConnectionMessage: (message: RawWebsocketMessage) =>
        Promise<ConversationConnectionMessage>
      return:
        type:
          - >-
            (message: RawWebsocketMessage) =>
            Promise<ConversationConnectionMessage>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
