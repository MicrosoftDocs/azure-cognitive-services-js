### YamlMime:UniversalReference
items:
  - uid: microsoft-cognitiveservices-speech-sdk.IQueue
    name: IQueue
    fullName: IQueue<TItem>
    children:
      - microsoft-cognitiveservices-speech-sdk.IQueue.dequeue
      - microsoft-cognitiveservices-speech-sdk.IQueue.dispose
      - microsoft-cognitiveservices-speech-sdk.IQueue.enqueue
      - microsoft-cognitiveservices-speech-sdk.IQueue.enqueueFromPromise
      - microsoft-cognitiveservices-speech-sdk.IQueue.isDisposed
      - microsoft-cognitiveservices-speech-sdk.IQueue.length
      - microsoft-cognitiveservices-speech-sdk.IQueue.peek
    langs:
      - typeScript
    type: interface
    summary: ''
    extends:
      name: microsoft-cognitiveservices-speech-sdk.IDisposable
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IQueue.dequeue
    name: dequeue()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function dequeue()
      parameters: []
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.Promise<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IQueue.dispose
    name: dispose(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Performs cleanup operations on this instance
    syntax:
      content: 'function dispose(reason?: string)'
      parameters:
        - id: reason
          type:
            - string
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IQueue.enqueue
    name: enqueue(TItem)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enqueue(item: TItem)'
      parameters:
        - id: item
          type:
            - TItem
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IQueue.enqueueFromPromise
    name: enqueueFromPromise(Promise<TItem>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enqueueFromPromise(promise: Promise<TItem>)'
      parameters:
        - id: promise
          type:
            - microsoft-cognitiveservices-speech-sdk.Promise<TItem>
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IQueue.isDisposed
    name: isDisposed()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isDisposed()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IQueue.length
    name: length()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function length()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IQueue.peek
    name: peek()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function peek()
      parameters: []
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.Promise<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
references:
  - uid: microsoft-cognitiveservices-speech-sdk.IDisposable
    name: IDisposable
    spec.typeScript:
      - name: IDisposable
        fullName: IDisposable
        uid: microsoft-cognitiveservices-speech-sdk.IDisposable
  - uid: microsoft-cognitiveservices-speech-sdk.Promise<TItem>
    name: Promise<TItem>
    spec.typeScript:
      - name: Promise
        fullName: Promise
        uid: microsoft-cognitiveservices-speech-sdk.Promise
      - name: <TItem>
        fullName: <TItem>
