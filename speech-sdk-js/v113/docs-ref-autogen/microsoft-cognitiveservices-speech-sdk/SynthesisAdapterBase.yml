### YamlMime:UniversalReference
items:
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase
    name: SynthesisAdapterBase
    fullName: SynthesisAdapterBase
    children:
      - >-
        microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.activityTemplate
      - microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.addHeader
      - microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.agentConfig
      - >-
        microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.audioOutputFormat
      - microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.connect
      - microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.connectAsync
      - >-
        microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.connectionEvents
      - microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.dispose
      - microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.isDisposed
      - >-
        microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.sendNetworkMessage
      - >-
        microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.serviceEvents
      - microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.Speak
      - microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.constructor
      - >-
        microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.synthesisContext
      - >-
        microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.telemetryData
      - >-
        microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.telemetryDataEnabled
    langs:
      - typeScript
    type: class
    summary: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.activityTemplate
    name: activityTemplate
    fullName: activityTemplate
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string activityTemplate
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.addHeader
    name: 'addHeader(ArrayBuffer, AudioOutputFormatImpl)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function addHeader(audio: ArrayBuffer, format:
        AudioOutputFormatImpl)
      parameters:
        - id: audio
          type:
            - ArrayBuffer
          description: ''
        - id: format
          type:
            - AudioOutputFormatImpl
          description: ''
      return:
        type:
          - ArrayBuffer
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.agentConfig
    name: agentConfig
    fullName: agentConfig
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: AgentConfig agentConfig
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.AgentConfig
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.audioOutputFormat
    name: audioOutputFormat
    fullName: audioOutputFormat
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: any audioOutputFormat
      return:
        type:
          - any
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.connect
    name: connect()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function connect()
      parameters: []
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.connectAsync
    name: 'connectAsync(Callback, Callback)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function connectAsync(cb?: Callback, err?: Callback)'
      parameters:
        - id: cb
          type:
            - microsoft-cognitiveservices-speech-sdk.Callback
          description: ''
          optional: true
        - id: err
          type:
            - microsoft-cognitiveservices-speech-sdk.Callback
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.connectionEvents
    name: connectionEvents
    fullName: connectionEvents
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: EventSource<ConnectionEvent> connectionEvents
      return:
        type:
          - >-
            microsoft-cognitiveservices-speech-sdk.EventSource<microsoft-cognitiveservices-speech-sdk.ConnectionEvent>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.dispose
    name: dispose(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function dispose(reason?: string)'
      parameters:
        - id: reason
          type:
            - string
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.isDisposed
    name: isDisposed()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isDisposed()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.sendNetworkMessage
    name: >-
      sendNetworkMessage(string, string | ArrayBuffer, () => void, (error:
      string) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function sendNetworkMessage(path: string, payload: string | ArrayBuffer,
        success?: () => void, err?: (error: string) => void)
      parameters:
        - id: path
          type:
            - string
          description: ''
        - id: payload
          type:
            - string | ArrayBuffer
          description: ''
        - id: success
          type:
            - () => void
          description: ''
          optional: true
        - id: err
          type:
            - '(error: string) => void'
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.serviceEvents
    name: serviceEvents
    fullName: serviceEvents
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: EventSource<ServiceEvent> serviceEvents
      return:
        type:
          - >-
            microsoft-cognitiveservices-speech-sdk.EventSource<microsoft-cognitiveservices-speech-sdk.ServiceEvent>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.Speak
    name: >-
      Speak(string, boolean, string, (e: SpeechSynthesisResult) => void, (e:
      string) => void, IAudioDestination)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function Speak(text: string, isSSML: boolean, requestId: string,
        successCallback: (e: SpeechSynthesisResult) => void, errorCallBack: (e:
        string) => void, audioDestination: IAudioDestination)
      parameters:
        - id: text
          type:
            - string
          description: ''
        - id: isSSML
          type:
            - boolean
          description: ''
        - id: requestId
          type:
            - string
          description: ''
        - id: successCallback
          type:
            - '(e: SpeechSynthesisResult) => void'
          description: ''
        - id: errorCallBack
          type:
            - '(e: string) => void'
          description: ''
        - id: audioDestination
          type:
            - microsoft-cognitiveservices-speech-sdk.IAudioDestination
          description: ''
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.Promise<boolean>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.constructor
    name: >-
      SynthesisAdapterBase(IAuthentication, ISynthesisConnectionFactory,
      SynthesizerConfig, SpeechSynthesizer, IAudioDestination)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new SynthesisAdapterBase(authentication: IAuthentication,
        connectionFactory: ISynthesisConnectionFactory, synthesizerConfig:
        SynthesizerConfig, speechSynthesizer: SpeechSynthesizer,
        audioDestination: IAudioDestination)
      parameters:
        - id: authentication
          type:
            - microsoft-cognitiveservices-speech-sdk.IAuthentication
          description: ''
        - id: connectionFactory
          type:
            - microsoft-cognitiveservices-speech-sdk.ISynthesisConnectionFactory
          description: ''
        - id: synthesizerConfig
          type:
            - microsoft-cognitiveservices-speech-sdk.SynthesizerConfig
          description: ''
        - id: speechSynthesizer
          type:
            - microsoft-cognitiveservices-speech-sdk.SpeechSynthesizer
          description: ''
        - id: audioDestination
          type:
            - microsoft-cognitiveservices-speech-sdk.IAudioDestination
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.synthesisContext
    name: synthesisContext
    fullName: synthesisContext
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: SynthesisContext synthesisContext
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.SynthesisContext
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.telemetryData
    name: telemetryData
    fullName: telemetryData
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static telemetryData: (json: string) => void'
      return:
        type:
          - '(json: string) => void'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.SynthesisAdapterBase.telemetryDataEnabled
    name: telemetryDataEnabled
    fullName: telemetryDataEnabled
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static telemetryDataEnabled: boolean'
      return:
        type:
          - boolean
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
references:
  - uid: microsoft-cognitiveservices-speech-sdk.IAuthentication
    name: IAuthentication
    spec.typeScript:
      - name: IAuthentication
        fullName: IAuthentication
        uid: microsoft-cognitiveservices-speech-sdk.IAuthentication
  - uid: microsoft-cognitiveservices-speech-sdk.ISynthesisConnectionFactory
    name: ISynthesisConnectionFactory
    spec.typeScript:
      - name: ISynthesisConnectionFactory
        fullName: ISynthesisConnectionFactory
        uid: microsoft-cognitiveservices-speech-sdk.ISynthesisConnectionFactory
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesizerConfig
    name: SynthesizerConfig
    spec.typeScript:
      - name: SynthesizerConfig
        fullName: SynthesizerConfig
        uid: microsoft-cognitiveservices-speech-sdk.SynthesizerConfig
  - uid: microsoft-cognitiveservices-speech-sdk.SpeechSynthesizer
    name: SpeechSynthesizer
    spec.typeScript:
      - name: SpeechSynthesizer
        fullName: SpeechSynthesizer
        uid: microsoft-cognitiveservices-speech-sdk.SpeechSynthesizer
  - uid: microsoft-cognitiveservices-speech-sdk.IAudioDestination
    name: IAudioDestination
    spec.typeScript:
      - name: IAudioDestination
        fullName: IAudioDestination
        uid: microsoft-cognitiveservices-speech-sdk.IAudioDestination
  - uid: microsoft-cognitiveservices-speech-sdk.AgentConfig
    name: AgentConfig
    spec.typeScript:
      - name: AgentConfig
        fullName: AgentConfig
        uid: microsoft-cognitiveservices-speech-sdk.AgentConfig
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.EventSource<microsoft-cognitiveservices-speech-sdk.ConnectionEvent>
    name: ConnectionEvent>
    spec.typeScript:
      - name: EventSource
        fullName: EventSource
        uid: microsoft-cognitiveservices-speech-sdk.EventSource
      - name: <
        fullName: <
      - name: ConnectionEvent
        fullName: ConnectionEvent
        uid: microsoft-cognitiveservices-speech-sdk.ConnectionEvent
      - name: '>'
        fullName: '>'
  - uid: >-
      microsoft-cognitiveservices-speech-sdk.EventSource<microsoft-cognitiveservices-speech-sdk.ServiceEvent>
    name: ServiceEvent>
    spec.typeScript:
      - name: EventSource
        fullName: EventSource
        uid: microsoft-cognitiveservices-speech-sdk.EventSource
      - name: <
        fullName: <
      - name: ServiceEvent
        fullName: ServiceEvent
        uid: microsoft-cognitiveservices-speech-sdk.ServiceEvent
      - name: '>'
        fullName: '>'
  - uid: microsoft-cognitiveservices-speech-sdk.SynthesisContext
    name: SynthesisContext
    spec.typeScript:
      - name: SynthesisContext
        fullName: SynthesisContext
        uid: microsoft-cognitiveservices-speech-sdk.SynthesisContext
  - uid: microsoft-cognitiveservices-speech-sdk.Promise<boolean>
    name: Promise<boolean>
    spec.typeScript:
      - name: Promise
        fullName: Promise
        uid: microsoft-cognitiveservices-speech-sdk.Promise
      - name: <boolean>
        fullName: <boolean>
  - uid: microsoft-cognitiveservices-speech-sdk.Callback
    name: Callback
    spec.typeScript:
      - name: Callback
        fullName: Callback
        uid: microsoft-cognitiveservices-speech-sdk.Callback
