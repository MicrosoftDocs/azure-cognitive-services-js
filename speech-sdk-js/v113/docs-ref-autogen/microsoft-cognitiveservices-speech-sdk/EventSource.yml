### YamlMime:UniversalReference
items:
  - uid: microsoft-cognitiveservices-speech-sdk.EventSource
    name: EventSource
    fullName: EventSource<TEvent>
    children:
      - microsoft-cognitiveservices-speech-sdk.EventSource.attach
      - microsoft-cognitiveservices-speech-sdk.EventSource.attachListener
      - microsoft-cognitiveservices-speech-sdk.EventSource.dispose
      - microsoft-cognitiveservices-speech-sdk.EventSource.constructor
      - microsoft-cognitiveservices-speech-sdk.EventSource.isDisposed
      - microsoft-cognitiveservices-speech-sdk.EventSource.metadata
      - microsoft-cognitiveservices-speech-sdk.EventSource.onEvent
    langs:
      - typeScript
    type: class
    summary: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.EventSource.attach
    name: attach
    fullName: attach
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'attach: (onEventCallback: (event: TEvent) => void) => IDetachable'
      return:
        type:
          - '(onEventCallback: (event: TEvent) => void) => IDetachable'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.EventSource.attachListener
    name: attachListener
    fullName: attachListener
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'attachListener: (listener: IEventListener<TEvent>) => IDetachable'
      return:
        type:
          - '(listener: IEventListener<TEvent>) => IDetachable'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.EventSource.dispose
    name: dispose
    fullName: dispose
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'dispose: () => void'
      return:
        type:
          - () => void
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.EventSource.constructor
    name: EventSource(IStringDictionary<string>)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new EventSource(metadata?: IStringDictionary<string>)'
      parameters:
        - id: metadata
          type:
            - microsoft-cognitiveservices-speech-sdk.IStringDictionary<string>
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.EventSource.isDisposed
    name: isDisposed
    fullName: isDisposed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'isDisposed: () => boolean'
      return:
        type:
          - () => boolean
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.EventSource.metadata
    name: metadata
    fullName: metadata
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: IStringDictionary<string> metadata
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.IStringDictionary<string>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.EventSource.onEvent
    name: onEvent
    fullName: onEvent
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'onEvent: (event: TEvent) => void'
      return:
        type:
          - '(event: TEvent) => void'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
references:
  - uid: microsoft-cognitiveservices-speech-sdk.IStringDictionary<string>
    name: IStringDictionary<string>
    spec.typeScript:
      - name: IStringDictionary
        fullName: IStringDictionary
        uid: microsoft-cognitiveservices-speech-sdk.IStringDictionary
      - name: <string>
        fullName: <string>
