### YamlMime:UniversalReference
items:
  - uid: microsoft-cognitiveservices-speech-sdk.IList
    name: IList
    fullName: IList<TItem>
    children:
      - microsoft-cognitiveservices-speech-sdk.IList.add
      - microsoft-cognitiveservices-speech-sdk.IList.all
      - microsoft-cognitiveservices-speech-sdk.IList.any
      - microsoft-cognitiveservices-speech-sdk.IList.clear
      - microsoft-cognitiveservices-speech-sdk.IList.clone
      - microsoft-cognitiveservices-speech-sdk.IList.concat
      - microsoft-cognitiveservices-speech-sdk.IList.concatArray
      - microsoft-cognitiveservices-speech-sdk.IList.dispose
      - microsoft-cognitiveservices-speech-sdk.IList.first
      - microsoft-cognitiveservices-speech-sdk.IList.forEach
      - microsoft-cognitiveservices-speech-sdk.IList.get
      - microsoft-cognitiveservices-speech-sdk.IList.insertAt
      - microsoft-cognitiveservices-speech-sdk.IList.isDisposed
      - microsoft-cognitiveservices-speech-sdk.IList.join
      - microsoft-cognitiveservices-speech-sdk.IList.last
      - microsoft-cognitiveservices-speech-sdk.IList.length
      - microsoft-cognitiveservices-speech-sdk.IList.onAdded
      - microsoft-cognitiveservices-speech-sdk.IList.onDisposed
      - microsoft-cognitiveservices-speech-sdk.IList.onRemoved
      - microsoft-cognitiveservices-speech-sdk.IList.orderBy
      - microsoft-cognitiveservices-speech-sdk.IList.orderByDesc
      - microsoft-cognitiveservices-speech-sdk.IList.remove
      - microsoft-cognitiveservices-speech-sdk.IList.removeAt
      - microsoft-cognitiveservices-speech-sdk.IList.removeFirst
      - microsoft-cognitiveservices-speech-sdk.IList.removeLast
      - microsoft-cognitiveservices-speech-sdk.IList.select
      - microsoft-cognitiveservices-speech-sdk.IList.toArray
      - microsoft-cognitiveservices-speech-sdk.IList.where
    langs:
      - typeScript
    type: interface
    summary: ''
    extends:
      name: microsoft-cognitiveservices-speech-sdk.IDisposable
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.add
    name: add(TItem)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function add(item: TItem)'
      parameters:
        - id: item
          type:
            - TItem
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.all
    name: 'all((item: TItem) => boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function all(callback: (item: TItem) => boolean)'
      parameters:
        - id: callback
          type:
            - '(item: TItem) => boolean'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.any
    name: 'any((item: TItem, index: number) => boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function any(callback?: (item: TItem, index: number) => boolean)'
      parameters:
        - id: callback
          type:
            - '(item: TItem, index: number) => boolean'
          description: ''
          optional: true
      return:
        type:
          - boolean
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.clear
    name: clear()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function clear()
      parameters: []
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.clone
    name: clone()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function clone()
      parameters: []
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.List<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.concat
    name: concat(List<TItem>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function concat(list: List<TItem>)'
      parameters:
        - id: list
          type:
            - microsoft-cognitiveservices-speech-sdk.List<TItem>
          description: ''
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.List<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.concatArray
    name: 'concatArray(TItem[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function concatArray(array: TItem[])'
      parameters:
        - id: array
          type:
            - 'TItem[]'
          description: ''
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.List<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.dispose
    name: dispose(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Performs cleanup operations on this instance
    syntax:
      content: 'function dispose(reason?: string)'
      parameters:
        - id: reason
          type:
            - string
          description: ''
          optional: true
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.first
    name: first()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function first()
      parameters: []
      return:
        type:
          - TItem
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.forEach
    name: 'forEach((item: TItem, index: number) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function forEach(callback: (item: TItem, index: number) => void)'
      parameters:
        - id: callback
          type:
            - '(item: TItem, index: number) => void'
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.get
    name: get(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(itemIndex: number)'
      parameters:
        - id: itemIndex
          type:
            - number
          description: ''
      return:
        type:
          - TItem
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.insertAt
    name: 'insertAt(number, TItem)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function insertAt(index: number, item: TItem)'
      parameters:
        - id: index
          type:
            - number
          description: ''
        - id: item
          type:
            - TItem
          description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.isDisposed
    name: isDisposed()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isDisposed()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.join
    name: join(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function join(seperator?: string)'
      parameters:
        - id: seperator
          type:
            - string
          description: ''
          optional: true
      return:
        type:
          - string
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.last
    name: last()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function last()
      parameters: []
      return:
        type:
          - TItem
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.length
    name: length()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function length()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.onAdded
    name: onAdded(() => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onAdded(addedCallback: () => void)'
      parameters:
        - id: addedCallback
          type:
            - () => void
          description: ''
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.IDetachable
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.onDisposed
    name: onDisposed(() => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onDisposed(disposedCallback: () => void)'
      parameters:
        - id: disposedCallback
          type:
            - () => void
          description: ''
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.IDetachable
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.onRemoved
    name: onRemoved(() => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onRemoved(removedCallback: () => void)'
      parameters:
        - id: removedCallback
          type:
            - () => void
          description: ''
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.IDetachable
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.orderBy
    name: 'orderBy((a: TItem, b: TItem) => number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function orderBy(compareFn: (a: TItem, b: TItem) => number)'
      parameters:
        - id: compareFn
          type:
            - '(a: TItem, b: TItem) => number'
          description: ''
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.List<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.orderByDesc
    name: 'orderByDesc((a: TItem, b: TItem) => number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function orderByDesc(compareFn: (a: TItem, b: TItem) => number)'
      parameters:
        - id: compareFn
          type:
            - '(a: TItem, b: TItem) => number'
          description: ''
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.List<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.remove
    name: 'remove(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function remove(index: number, count: number)'
      parameters:
        - id: index
          type:
            - number
          description: ''
        - id: count
          type:
            - number
          description: ''
      return:
        type:
          - 'TItem[]'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.removeAt
    name: removeAt(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeAt(index: number)'
      parameters:
        - id: index
          type:
            - number
          description: ''
      return:
        type:
          - TItem
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.removeFirst
    name: removeFirst()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function removeFirst()
      parameters: []
      return:
        type:
          - TItem
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.removeLast
    name: removeLast()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function removeLast()
      parameters: []
      return:
        type:
          - TItem
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.select
    name: 'select((item: TItem, index: number) => T2)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function select<T2>(callback: (item: TItem, index: number) => T2)'
      parameters:
        - id: callback
          type:
            - '(item: TItem, index: number) => T2'
          description: ''
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.List<T2>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.toArray
    name: toArray()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function toArray()
      parameters: []
      return:
        type:
          - 'TItem[]'
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
  - uid: microsoft-cognitiveservices-speech-sdk.IList.where
    name: 'where((item: TItem, index: number) => boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function where(callback: (item: TItem, index: number) => boolean)'
      parameters:
        - id: callback
          type:
            - '(item: TItem, index: number) => boolean'
          description: ''
      return:
        type:
          - microsoft-cognitiveservices-speech-sdk.List<TItem>
        description: ''
    package: microsoft-cognitiveservices-speech-sdk
references:
  - uid: microsoft-cognitiveservices-speech-sdk.IDisposable
    name: IDisposable
    spec.typeScript:
      - name: IDisposable
        fullName: IDisposable
        uid: microsoft-cognitiveservices-speech-sdk.IDisposable
  - uid: microsoft-cognitiveservices-speech-sdk.List<TItem>
    name: List<TItem>
    spec.typeScript:
      - name: List
        fullName: List
        uid: microsoft-cognitiveservices-speech-sdk.List
      - name: <TItem>
        fullName: <TItem>
  - uid: microsoft-cognitiveservices-speech-sdk.IDetachable
    name: IDetachable
    spec.typeScript:
      - name: IDetachable
        fullName: IDetachable
        uid: microsoft-cognitiveservices-speech-sdk.IDetachable
  - uid: microsoft-cognitiveservices-speech-sdk.List<T2>
    name: List<T2>
    spec.typeScript:
      - name: List
        fullName: List
        uid: microsoft-cognitiveservices-speech-sdk.List
      - name: <T2>
        fullName: <T2>
